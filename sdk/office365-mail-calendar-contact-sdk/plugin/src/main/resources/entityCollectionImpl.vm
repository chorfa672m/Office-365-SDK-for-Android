#*
 * Copyright Â© Microsoft Open Technologies, Inc.
 *
 * All Rights Reserved
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * THIS CODE IS PROVIDED *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS
 * OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION
 * ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A
 * PARTICULAR PURPOSE, MERCHANTABILITY OR NON-INFRINGEMENT.
 *
 * See the Apache License, Version 2.0 for the specific language
 * governing permissions and limitations under the License.
 *#
package ${package};

import com.msopentech.odatajclient.engine.client.http.HttpClientException;
import com.msopentech.odatajclient.engine.communication.ODataClientErrorException;
import com.msopentech.odatajclient.engine.communication.ODataServerErrorException;

import com.msopentech.odatajclient.proxy.api.AbstractEntityCollection;
import com.msopentech.odatajclient.proxy.api.annotations.Operation;
import com.msopentech.odatajclient.proxy.api.annotations.Parameter;
import com.msopentech.odatajclient.proxy.api.impl.EntityCollectionInvocationHandler;
import com.msopentech.odatajclient.engine.data.metadata.edm.v3.ParameterMode;
#foreach($ns in $namespaces)
import ${basePackage}.${ns}.*;
import ${basePackage}.${ns}.types.*;
#end

// EdmSimpleType property imports
import com.msopentech.odatajclient.engine.data.ODataDuration;
import com.msopentech.odatajclient.engine.data.ODataTimestamp;
import com.msopentech.odatajclient.engine.data.metadata.edm.geospatial.Geospatial;
import com.msopentech.odatajclient.engine.data.metadata.edm.geospatial.GeospatialCollection;
import com.msopentech.odatajclient.engine.data.metadata.edm.geospatial.LineString;
import com.msopentech.odatajclient.engine.data.metadata.edm.geospatial.MultiLineString;
import com.msopentech.odatajclient.engine.data.metadata.edm.geospatial.MultiPoint;
import com.msopentech.odatajclient.engine.data.metadata.edm.geospatial.MultiPolygon;
import com.msopentech.odatajclient.engine.data.metadata.edm.geospatial.Point;
import com.msopentech.odatajclient.engine.data.metadata.edm.geospatial.Polygon;
import java.math.BigDecimal;
import java.net.URI;
import java.util.UUID;
import java.io.Serializable;
import java.util.Collection;
import java.util.Iterator;

/**
 * Default I$utility.capitalize($entityType.Name)Collection implementation.
 */
public class $utility.capitalize($entityType.Name)Collection implements I$utility.capitalize($entityType.Name)Collection {

    /** Proxy to communicate with service. */
    private I$utility.capitalize($entityType.Name)Collection mProxy;

    /**
     * Constructor.
     *
     * @param proxy proxy to communicate with service.
     */
    public $utility.capitalize($entityType.Name)Collection(I$utility.capitalize($entityType.Name)Collection proxy) {
        mProxy = proxy;
    }

## not sure if loop below works correct but can not test it in our endpoint
#foreach($operation in $utility.getFunctionImportsBoundTo($entityType.Name, true))
    /**
     * {inheritDoc}
     */
    public #if($operation.ReturnType)$utility.getJavaType($operation.ReturnType)#{else}void#end $utility.uncapitalize($operation.Name) throws HttpClientException, ODataServerErrorException, ODataClientErrorException (
    #if($operation.Parameters)
      #set( $count = $operation.Parameters.size() )#*
      *##foreach($param in $operation.Parameters)#*
        *##set( $count = $count - 1 )#*
        *##if( !$utility.isSameType($entityType.Name, $param.Type, true) )#*
      *#     $utility.getJavaType($param.Type) $utility.uncapitalize($param.Name)#if( $count > 0 ), #end

    #end
    #end#*
    *##end) {
        #if($operation.ReturnType)return #{end}mProxy.$utility.uncapitalize($operation.Name)(
    #if($operation.Parameters)
      #set( $count = $operation.Parameters.size() )#*
      *##foreach($param in $operation.Parameters)#*
        *##set( $count = $count - 1 )#*
        *##if( !$utility.isSameType($entityType.Name, $param.Type, true) )#*
      *#     $utility.uncapitalize($param.Name)#if( $count > 0 ), #end

    #end
    #end#*
    *##end);
    }
#end

    /**
     * {@inheritDoc}
     */
    public boolean add(I$utility.capitalize($entityType.Name) item) {
        return mProxy.add(item);
    }

    /**
     * {@inheritDoc}
     */
    public boolean addAll(Collection<? extends I$utility.capitalize($entityType.Name)> c) {
        return mProxy.addAll(c);
    }

    /**
     * {@inheritDoc}
     */
    public void clear() {
        mProxy.clear();
    }

    /**
     * {@inheritDoc}
     */
    public boolean contains(Object o) {
        return mProxy.contains(o);
    }

    /**
     * {@inheritDoc}
     */
    public boolean containsAll(Collection<?> c) {
        return mProxy.containsAll(c);
    }

    /**
     * {@inheritDoc}
     */
    public boolean equals(Object o) {
        return mProxy.equals(o);
    }

    /**
     * {@inheritDoc}
     */
    public int hashCode() {
        return mProxy.hashCode();
    }

    /**
     * {@inheritDoc}
     */
    public boolean isEmpty() {
        return mProxy.isEmpty();
    }

    /**
     * {@inheritDoc}
     */
    public Iterator<I$utility.capitalize($entityType.Name)> iterator() {
        return mProxy.iterator();
    }

    /**
     * {@inheritDoc}
     */
    public boolean remove(Object o) {
        return mProxy.remove(o);
    }

    /**
     * {@inheritDoc}
     */
    public boolean removeAll(Collection<?> c) {
        return mProxy.removeAll(c);
    }

    /**
     * {@inheritDoc}
     */
    public boolean retainAll(Collection<?> c) {
        return mProxy.retainAll(c);
    }

    /**
     * {@inheritDoc}
     */
    public int size() {
        return mProxy.size();
    }

    /**
     * {@inheritDoc}
     */
    public Object[] toArray() {
        return mProxy.toArray();
    }

    /**
     * {@inheritDoc}
     */
    public <T> T[] toArray(T[] a) {
        return mProxy.toArray(a);
    }
}
