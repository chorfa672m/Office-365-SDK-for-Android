#*
 * Copyright Â© Microsoft Open Technologies, Inc.
 *
 * All Rights Reserved
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * THIS CODE IS PROVIDED *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS
 * OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION
 * ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A
 * PARTICULAR PURPOSE, MERCHANTABILITY OR NON-INFRINGEMENT.
 *
 * See the Apache License, Version 2.0 for the specific language
 * governing permissions and limitations under the License.
 *#
package ${package};


import com.msopentech.odatajclient.engine.client.http.HttpClientException;
import com.msopentech.odatajclient.engine.communication.ODataClientErrorException;
import com.msopentech.odatajclient.engine.communication.ODataServerErrorException;

import com.msopentech.odatajclient.proxy.api.AbstractEntityCollection;
import com.msopentech.odatajclient.proxy.api.annotations.Operation;
import com.msopentech.odatajclient.proxy.api.annotations.Parameter;
import com.msopentech.odatajclient.engine.data.metadata.edm.v3.ParameterMode;
#foreach($ns in $namespaces)
import ${basePackage}.${ns}.*;
import ${basePackage}.${ns}.types.*;
#end

// EdmSimpleType property imports
import com.msopentech.odatajclient.engine.data.ODataDuration;
import com.msopentech.odatajclient.engine.data.ODataTimestamp;
import com.msopentech.odatajclient.engine.data.metadata.edm.geospatial.Geospatial;
import com.msopentech.odatajclient.engine.data.metadata.edm.geospatial.GeospatialCollection;
import com.msopentech.odatajclient.engine.data.metadata.edm.geospatial.LineString;
import com.msopentech.odatajclient.engine.data.metadata.edm.geospatial.MultiLineString;
import com.msopentech.odatajclient.engine.data.metadata.edm.geospatial.MultiPoint;
import com.msopentech.odatajclient.engine.data.metadata.edm.geospatial.MultiPolygon;
import com.msopentech.odatajclient.engine.data.metadata.edm.geospatial.Point;
import com.msopentech.odatajclient.engine.data.metadata.edm.geospatial.Polygon;
import java.math.BigDecimal;
import java.net.URI;
import java.util.UUID;
import java.io.Serializable;
import java.util.Collection;

/**
 * Represents collection of $entityType.Name items.
 */
public interface I$utility.capitalize($entityType.Name)Collection extends AbstractEntityCollection<I$utility.capitalize($entityType.Name)> {
#foreach($operation in $utility.getFunctionsBoundTo($entityType.Name, true))
    /**
     * Invokes $operation.Name function on this I$utility.capitalize($entityType.Name)Collection.
#foreach($param in $operation.Parameters)
     * @param $utility.uncapitalize($param.Name) ${param.Name}.
#end
#if ($operation.ReturnType)
     * @return ${operation.ReturnType.Type}.
#end
     * @throws ODataClientErrorException if server returned status code from 400 to 499.
     * @throws ODataServerErrorException if server returned status code from 500 to 599.
     * @throws HttpClientException if any error occured during parsing server response.
     */
    @Operation(name = "$operation.Name"
                    isSideEffecting = false#if($operation.EntitySetPath),
                    entitySetPath = $operation.EntitySetPath#end#if($operation.isIsComposable),
                    isComposable = $operation.isIsComposable#end#if($operation.ReturnType),
                    returnType = "$operation.ReturnType"#end)
    #if($operation.ReturnType)$utility.getJavaType($operation.ReturnType)#{else}void#end $utility.uncapitalize($operation.Name) throws HttpClientException, ODataServerErrorException, ODataClientErrorException (
    #if($operation.Parameters)
      #set( $count = $operation.Parameters.size() )#*
      *##foreach($param in $operation.Parameters)#*
        *##set( $count = $count - 1 )#*
        *##if( !$utility.isSameType($entityType.Name, $param.Type, false) )#*
      *#    @Parameter(name = "$param.Name", type = "$param.Type", nullable = $param.Nullable#if($param.Mode), mode = ParameterMode.$param.Mode.toString()#end) $utility.getJavaType($param.Type) $utility.uncapitalize($param.Name)#if( $count > 0 ), #end

    #end
    #end#*
    *##end);
#end

#foreach($operation in $utility.getActionsBoundTo($entityType.Name, true))
    /**
     * Invokes $operation.Name action on this I$utility.capitalize($entityType.Name)Collection.
#foreach($param in $operation.Parameters)
     * @param $utility.uncapitalize($param.Name) ${param.Name}.
#end
#if ($operation.ReturnType)
     * @return ${operation.ReturnType.Type}.
#end
     * @throws ODataClientErrorException if server returned status code from 400 to 499.
     * @throws ODataServerErrorException if server returned status code from 500 to 599.
     * @throws HttpClientException if any error occured during parsing server response.
     */
    @Operation(name = "$operation.Name"
                    httpMethod = HttpMethod.POST#if($operation.EntitySetPath),
                    entitySetPath = $operation.EntitySetPath#end #if ($operation.isIsComposable),
                    isComposable = $operation.isIsComposable#end#if($operation.ReturnType),
                    returnType = "$operation.ReturnType"#end)
    #if($operation.ReturnType)$utility.getJavaType($operation.ReturnType)#{else}void#end $utility.uncapitalize($operation.Name) throws HttpClientException, ODataServerErrorException, ODataClientErrorException (
    #if($operation.Parameters)
      #set( $count = $operation.Parameters.size() )#*
      *##foreach($param in $operation.Parameters)#*
        *##set( $count = $count - 1 )#*
        *##if( !$utility.isSameType($entityType.Name, $param.Type, false) )#*
      *#    @Parameter(name = "$param.Name", type = "$param.Type", nullable = $param.Nullable#if ($param.Mode), mode = ParameterMode.$param.Mode.toString()#end) $utility.getJavaType($param.Type) $utility.uncapitalize($param.Name)#if( $count > 0 ), #end

    #end
    #end#*
    *##end);
#end

}
