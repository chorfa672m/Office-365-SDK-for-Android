#*
 * Copyright Â© Microsoft Open Technologies, Inc.
 *
 * All Rights Reserved
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * THIS CODE IS PROVIDED *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS
 * OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION
 * ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A
 * PARTICULAR PURPOSE, MERCHANTABILITY OR NON-INFRINGEMENT.
 *
 * See the Apache License, Version 2.0 for the specific language
 * governing permissions and limitations under the License.
 *#
package ${package};

import com.msopentech.odatajclient.proxy.api.annotations.Namespace;
import com.msopentech.odatajclient.proxy.api.annotations.ComplexType;
import com.msopentech.odatajclient.proxy.api.annotations.Property;
import com.msopentech.odatajclient.proxy.api.AbstractComplexType;
#foreach($ns in $namespaces)
import ${basePackage}.${ns}.*;
import ${basePackage}.${ns}.types.*;
#end

// EdmSimpleType property imports
import com.msopentech.odatajclient.engine.data.ODataDuration;
import com.msopentech.odatajclient.engine.data.ODataTimestamp;
import com.msopentech.odatajclient.engine.data.metadata.edm.geospatial.Geospatial;
import com.msopentech.odatajclient.engine.data.metadata.edm.geospatial.GeospatialCollection;
import com.msopentech.odatajclient.engine.data.metadata.edm.geospatial.LineString;
import com.msopentech.odatajclient.engine.data.metadata.edm.geospatial.MultiLineString;
import com.msopentech.odatajclient.engine.data.metadata.edm.geospatial.MultiPoint;
import com.msopentech.odatajclient.engine.data.metadata.edm.geospatial.MultiPolygon;
import com.msopentech.odatajclient.engine.data.metadata.edm.geospatial.Point;
import com.msopentech.odatajclient.engine.data.metadata.edm.geospatial.Polygon;
import java.math.BigDecimal;
import java.net.URI;
import java.util.UUID;
import java.io.Serializable;
import java.util.Collection;

/**
 * Represents $complexType.Name complex type.
 */
@Namespace("$namespace")
@ComplexType("$complexType.Name")
public class $utility.capitalize($complexType.Name) extends AbstractComplexType {

#foreach ($property in $complexType.Properties)
    /**
     * Holds value of $property.Name property.
     */
    private $utility.getJavaType($property.Type) _$utility.uncapitalize($property.Name);

    /**
     * Gets a value of $property.Name property.
     *
     * @return current value of $property.Name property.
     */
    @Property(name = "$property.Name", type = "$property.Type", nullable = $property.Nullable)
    public $utility.getJavaType($property.Type) get$utility.capitalize($property.Name)() {
        return _$utility.uncapitalize($property.Name);
    }

    /**
     * Sets a value of $property.Name property.
     *
     * @param _$utility.uncapitalize($property.Name) new value.
     * @return current $utility.capitalize($complexType.Name) instance.
     */
    public $utility.capitalize($complexType.Name) set$utility.capitalize($property.Name)(final $utility.getJavaType($property.Type) _$utility.uncapitalize($property.Name)) {
        this._$utility.uncapitalize($property.Name) = _$utility.uncapitalize($property.Name);
        return this;
    }
#end
}