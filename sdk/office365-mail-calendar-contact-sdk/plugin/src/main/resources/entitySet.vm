#*
 * Copyright Â© Microsoft Open Technologies, Inc.
 *
 * All Rights Reserved
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * THIS CODE IS PROVIDED *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS
 * OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION
 * ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A
 * PARTICULAR PURPOSE, MERCHANTABILITY OR NON-INFRINGEMENT.
 *
 * See the Apache License, Version 2.0 for the specific language
 * governing permissions and limitations under the License.
 *#
package ${package};

import com.microsoft.office.proxy.OfficeEntitySet;
import com.msopentech.odatajclient.proxy.api.annotations.EntitySet;
import com.msopentech.odatajclient.proxy.api.annotations.CompoundKey;
import com.msopentech.odatajclient.proxy.api.annotations.CompoundKeyElement;
#foreach($ns in $namespaces)
import ${basePackage}.${ns}.*;
import ${basePackage}.${ns}.types.*;
#end

// EdmSimpleType property imports
import com.msopentech.odatajclient.engine.data.ODataDuration;
import com.msopentech.odatajclient.engine.data.ODataTimestamp;
import com.msopentech.odatajclient.engine.data.metadata.edm.geospatial.Geospatial;
import com.msopentech.odatajclient.engine.data.metadata.edm.geospatial.GeospatialCollection;
import com.msopentech.odatajclient.engine.data.metadata.edm.geospatial.LineString;
import com.msopentech.odatajclient.engine.data.metadata.edm.geospatial.MultiLineString;
import com.msopentech.odatajclient.engine.data.metadata.edm.geospatial.MultiPoint;
import com.msopentech.odatajclient.engine.data.metadata.edm.geospatial.MultiPolygon;
import com.msopentech.odatajclient.engine.data.metadata.edm.geospatial.Point;
import com.msopentech.odatajclient.engine.data.metadata.edm.geospatial.Polygon;
import java.math.BigDecimal;
import java.net.URI;
import java.util.UUID;
import java.io.Serializable;
import java.util.Collection;

#set( $keys = $utility.getEntityKeyType($entitySet) )
#if( $keys.size() > 1 )
  #set( $type = $utility.getEdmType($entitySet).EntityType.Name + "Key" )
#elseif( $keys.size() == 1 )
  #set( $type = $keys.values().iterator().next() )
#else
  #set( $type = "" )
#end
#if(!$pathToSet)#set($pathToSet=$entitySet.Name)#else#set($pathToSet = $pathToSet + $entitySet.Name)#end
#if(!$createPath)#set($createPath=$pathToSet)#end

/** Represents $entitySet.Name entity set. */
@EntitySet(name = "$entitySet.Name",
           path = "$pathToSet",
           createPath = "$createPath")
#set($isMessages = $utility.capitalize($entitySet.Name) == "Messages")
#set($isEvents = $utility.capitalize($entitySet.Name) == "Events")
public interface I$utility.capitalize($entitySet.Name) extends OfficeEntitySet<$utility.getJavaType($entitySet.EntityType), $type, $utility.getJavaType($entitySet.EntityType)Collection> {

#foreach( $dos in $utility.getDescendantsOrSelf($utility.getEdmType($entitySet)) )
    #set( $djt = $utility.getJavaType($dos) )
    #set( $sIdx = $djt.lastIndexOf('.') + 2)

    /**
     * Creates new $djt.substring($sIdx) in this $entitySet.Name entity set.
#if($isMessages)
     * @param path path to this set like "Drafts" or "Folders('abc')/ChildFolders('xyz')".
#elseif($isEvents)
     * @param calendarId id of calendar to create this event.
#end
     * @return created item.
     */
    $djt new$djt.substring($sIdx)(#if($isMessages)String path#elseif($isEvents)String calendarId#end);

    /**
     * Creates new collection of $djt.substring($sIdx) in $entitySet.Name entity set.
     *
     * @return created collection.
     */
    ${djt}Collection new$djt.substring($sIdx)Collection();
#end
}
